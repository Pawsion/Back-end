generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model pet {
  id            Int           @id
  name              String        @db.VarChar(45)
  type              String        @db.VarChar(45)
  breed             String        @db.VarChar(45)
  age               Int
  gender            String        @db.VarChar(45)
  veterinaryContact String        @db.VarChar(45)
  idUser       Int
  information       Json
  user              user          @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Pet_User")
  reservation       reservation[]

  @@index([idUser], map: "fk_Pet_User_idx")
}

model pethotel {
  id   Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  phoneNumber  String        @db.VarChar(20)
  email        String        @db.VarChar(255)
  location     String        @db.VarChar(255)
  workingHours String        @db.VarChar(255)
  reservation  reservation[]
  review       review[]
  term         term[]
}

model reservation {
  id      Int       @id
  startDate           DateTime? @db.Date
  endDate             DateTime? @db.Date
  status              Int?      @db.TinyInt
  idPet           Int 
  idUser         Int
  idPetHotel Int
  pet                 pet       @relation(fields: [idPet], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Reservation_Pet1")
  pethotel            pethotel  @relation(fields: [idPetHotel], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Reservation_PetHotel1")
  user                user      @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Reservation_User1")

  @@index([idPet], map: "fk_Reservation_Pet1_idx")
  @@index([idPetHotel], map: "fk_Reservation_PetHotel1_idx")
  @@index([idUser], map: "fk_Reservation_User1_idx")
}

model review {
  id            Int      @id @default(autoincrement())
  rating              Int
  comment             String?  @db.VarChar(255)
  date                DateTime @db.Date
  idUser         Int
  idPetHotel Int
  pethotel            pethotel @relation(fields: [idPetHotel], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_PetHotel1")
  user                user     @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_User1")

  @@index([idPetHotel], map: "fk_Review_PetHotel1_idx")
  @@index([idUser], map: "fk_Review_User1_idx")
}

model term {
  id              Int      @id @default(autoincrement())
  admissionDate       DateTime @db.Date
  releaseDate         DateTime @db.Date
  idPetHotel Int
  price               Decimal  @db.Decimal(10, 0)
  pethotel            pethotel @relation(fields: [idPetHotel], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Term_PetHotel1")

  @@index([idPetHotel], map: "fk_Term_PetHotel1_idx")
}

model user {
  id      Int           @id @default(autoincrement())
  firstName   String        @db.VarChar(45)
  lastName    String        @db.VarChar(45)
  phoneNumber String        @db.VarChar(45)
  // ! Should be unique
  email       String        @unique       @db.VarChar(45)
  // TODO String? ?????? Also check if 45 is limit
  password    String?       
  hashedRt    String?       
  pet         pet[]
  reservation reservation[]
  review      review[]
}
